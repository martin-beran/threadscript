/*! \page To_do Miscellaneous to-do tasks
 *
 * ToDo items should be added at appropriate places in Doxygen documentation
 * using command <tt>\\todo</tt>. If a ToDo is not related to a particular
 * place in C++ code, add it here.
 *
 * \tableofcontents
 *
 * \section To_do_first_release To-do list for the first release
 *
 * \todo A function returning a substring of a \c string
 *
 * \todo A function returning the size of a value: the length of a \c string,
 * or the number of elements of an \c vector or \c hash
 *
 * \todo Operations with threadscript::value_vector
 *
 * \todo Operations with threadscript::value_hash
 *
 * \todo Defining and calling user-defined functions
 *
 * \todo Throwing and catching exceptions
 *
 * \todo Running in multiple threads
 *
 * \todo Sharing data among threads
 *
 * \todo Passing data between threads
 *
 * \todo Resolving names in a parsed script before running the script
 *
 * \todo Command line interface to ThreadScript -- \ref Cmdline_ts. It should
 * provide command line options for memory and stack limits.
 *
 * \section To_do_optimization Optimization to-do taskts
 *
 * \todo Measure the overhead of allocating values for results of operations.
 *
 * \todo Possible optimization for functions returning \c bool: Instead of
 * allocating a new value, create global read-only values \c false and \c true
 * and return them from all Boolean functions.
 *
 * \todo Possible optimization for function return values: Manage a pool of
 * values of scalar types (\c bool, \c int, \c unsigned, maybe also \c string)
 * and return values from this pool instead of allocating new values.
 *
 * \todo Possible optimization for evaluating commands and functions: Manage
 * a pool of vectors of arguments with some small fixed capacity (e.g., 2--8).
 * If a command or a function is called with at most this number of arguments,
 * use a vector from this pool instead of allocating a new one.
 *
 * \todo Possible optimization of values: In addition to storing values of all
 * types as references (internally \c std::shared_ptr), allow storing small
 * values (with \c sizeof at most \c sizeof(std::shared_ptr) directly. There is
 * a problem of a suitable internal representation, because using \c
 * std::variant would add 8 bytes to each value.
 *
 * \section To_do_build To-do tasks related to the build process
 *
 * \todo Review \c NOLINT* suppressions related to false positives that are
 * probably caused by incorrect detections by \c clang-tidy.
 *
 * \todo Resolve \c clang-diagnostic-error reported by \c clang-tidy, which
 * cannot be suppressed in configuration file \c .clang-tidy or by \c NOLINT.
 *
 * \todo Make source to compile by Clang.
 *
 * \todo Make it work with libc++.
 */
