/*! \page Architecture Architecture
 *
 * \tableofcontents
 *
 * \section Architecture_Goals Goals
 *
 * \arg A simple interpreted scripting language
 * \arg Embeddable
 * \arg Usable as a configuration and ruleset implementation language for
 * multithreaded programs, including network servers, proxies, and packet
 * processors.
 * \arg Extensible by adding functionality implemented in native code.
 * \arg Native C++ API, using modern C++, currently C++20
 * \arg Multithreading with safe sharing of data among threads
 * \arg Deterministic memory and resource management compatible with C++: smart
 * pointers, no garbage collector, RAII
 * \arg Including comprehensive tests
 * \arg Development documentation, structured documentation of source code
 * \arg Multiplatform: using only the standard library and Boost, eliminate
 * usage of other library and OS-specific API as much as practical, a build
 * system based on CMake
 * \arg Free and open source
 *
 * \section Architecture_Debugging Debugging
 *
 * To help in debugging, class threadscript::DEBUG is available to generate
 * temporary debugging mesages. Such debugging messages should not be left in
 * source code indefinitely and they should be removed as soon as not needed.
 *
 * \section Architecture_Finalizers Finalizers
 *
 * Class threadscript::finally provides a simple tool for calling a function at
 * the end of the current scope regardless of how is the scope finished
 * (reaching the end, return or goto from the middle, or throwing an
 * exception). It is similar to \c finally in other programming languages.
 *
 * \section Architecture_Memory_allocation Memory allocation
 *
 * All ThreadScript classes (e.g., the virtual machine, script code, data,
 * symbol tables) are templates parametrized by an allocator type, which must
 * satisfy concept threadscript::impl::allocator. The default allocator type
 * template
 * threadscript::config::allocator_type, parametrized by the allocated type, is
 * defined in the build configuration file (config_default.hpp by default).
 * Normally an instance threadscript::allocator_any of this template is passed
 * around and rebound to various allocated types as needed. As described in the
 * documentation of threadscript::virtual_machine, all allocators used in the
 * context of a single virtual machine must be able to cooperate.
 *
 * Templates parametrized by an allocator type store the allocator type in
 * member type alias \c allocator_type, e.g.,
 * threadscript::basic_virtual_machine::allocator_type. If an allocator
 * instance is stored in the object, then it can be obtained by member function
 * \c get_allocator(), e.g.,
 * threadscript::basic_virtual_machine::get_allocator().
 *
 * The is a convention (inspired by standard library types like \c
 * std::basic_string and \c std::string) of using names containing \c basic_
 * for templates parametrized by an allocator type and corresponding names
 * without \c basic_ for instances using threadscript::allocator_any and
 * declared and explicitly instantiated usually in threadscript.hpp and
 * threadscript.cpp. For example, there is template
 * threadscript::basic_virtual_machine and its instance
 * threadscript::virtual_machine. The same convention is used for some typedefs
 * for (container) classes from the standard library that use allocators. The
 * typedefs are declared in allocated.hpp (e.g., threadscript::a_basic_string)
 * and instantiated in threadscript.hpp and threadscript.cpp (e.g.,
 * threadscript::a_string). These classes are generally used instead of classes
 * using the default allocator (like \c std::string).
 *
 * An exception from using allocators is the exception class hierarchy in
 * namespace threadscript::exception and classes used by exception classes,
 * e.g., threadscript::frame_location. There are two reasons: easier passing of
 * exception between ThreadScript and other code, and the possibility to
 * allocate an exception in a case of an error caused by an allocator.
 *
 * \section Architecture_Exceptions Exceptions
 *
 * ThreadScript reports errors by throwing exception classes derived from
 * threadscript::exception::base. These exceptions contain a description of an
 * error and its location in the form of a stack trace.
 *
 * A RAII function wrapper class threadscript::finally is provided for
 * performing cleanup actions when a scope is terminated, either normally or by
 * an exception.
 *
 * \section Architecture_Virtual_machine Virtual machine
 *
 * The main class representing a virtual machine is
 * threadscript::virtual_machine. It is an isolated context, containing any
 * number of interpreter threads (threadscript::state). Different VMs share
 * nothing and may be freely executed in parallel. Interpreter threads may be
 * arbitrarily mapped to threads of an underlying platform. The only condition
 * is that a single interpterer thread must not be accessed by multiple
 * platform threads simultaneously without synchronization. Script code
 * threadscript::script is created by one threads or from outside the VM, but
 * then it can be shared by all threads. The VM contains also a global
 * threadscript::symbol_table of values (derived from threadscript::value)
 * shared among threads. Each thread contains a threadscript::symbol_table of
 * global values private to the thread.
 *
 * \section Architecture_Values Values and symbol tables
 *
 * All values accessible by a script are represented by classes derived from
 * threadscript::value. Concrete types of values available for scripts should
 * be derived from threadscript::basic_typed_value, unless special care is
 * taken to ensure thread-safety semantics enforced by
 * threadscript::basic_typed_value::value().
 *
 * A normal writable value is accessible to a single thread only, so no locking
 * is required. If access to a value is needed in multiple threads, the value
 * must be marked thread-safe by threadscript::basic_value::set_mt_safe().
 * Classes derived from threadscript::basic_typed_value ensure thread-safety by
 * restricting access to read-only operations for values marked mt-safe. Access
 * to a mt-unsafe value via a mt-safe value is prevented by requiring members
 * of mt-safe containers (threadscript::value_vector, threadscript::value_hash)
 * to be also mt-safe. If modification of a data structure shared by multiple
 * threads is required, a class derived from threadscript::value must be
 * implemented that handles any necessary synchronization.
 *
 * There are some built-in scalar types (threadscript::value_bool,
 * threadscript::value_int, threadscript::value_unsigned,
 * threadscript::value_string), vectors (threadscript::value vector), and hashes
 * (threadscript::value_hash). New types can be added as extensions implemented
 * by additional native C++ classes derived from threadscript::value (usually
 * from threadscript::basic_value_object), e.g., threadscript::shared_vector.
 *
 * Memory management of values uses reference counting and is implemented by \c
 * std::shared_ptr and \c std::weak_ptr. There are no provisions for automatic
 * breaking of reference cycles.
 *
 * Variables are stored as named references to values in symbol tables
 * (threadscript::symbol_table). Symbol tables are chained, a name not found in
 * a symbol table is recursively searched in its parent and parent's ancestors.
 * At any time, each interpreter thread sees at least three symbol tables:
 * \arg the symbol table containing local variables of the current function
 * \arg the symbol table of global variables local to the current thread (the
 * parent of the function local variables)
 * \arg the global symbol table containing variables shared by all threads (the
 * parent of the thread global variables, not having a parent itself)
 *
 * \section Architecture_Code Script code and parsing
 *
 * \subsection Architecture_Code_Parsed Parsed script code
 *
 * Each parsed ThreadScript source file is represented by
 * a threadscript::script object. It owns a tree of threadscript::code_node
 * objects, which represent code of the script.
 *
 * \subsection Architecture_Parser Parser
 *
 * Parsing of ThreadScript source code is provided by functions
 * threadscript::parse_code() and threadscript::parse_code_file(). They take
 * the script text, either as a string view, or a text file, and a selection of
 * a syntax variant. They return the parsed internal representation of the
 * script as a shared pointer to threadscript::basic_script. If parsing fails
 * or the source file cannot be read, an exception is thrown.
 *
 * Internally, these functions create a parser by threadscript::syntax_factory
 * and a builder for the internal representation, being an implementation of
 * interface threadscript::script_builder, e.g.,
 * threadscript::basic_script_builder_impl. Then they invoke the created
 * parser.
 *
 * \subsection Architecture_Code_GenParser Generic parser
 *
 * Parsing of ThreadScript source code of scripts is implemented by a parser
 * defined using a generic recursive descent parser. The generic parser is
 * contained in file parser.hpp, namespace threadscript::parser. A parser for
 * a concrete grammar is defined by grammar rules, created by combining basic
 * rules available in threadscript::parser::rules. Examples how to use the
 * parser are in the tests in test_parser.cpp.
 *
 * Parsing of an input is initiated by class threadscript::parser::context. It
 * is possible to create a derived context class, for example, to provide
 * storage for information obtained from the parsed text. Storing information
 * or executing actions depending on input is done by adding handlers
 * (threadscript::parser::handler) to rules. When a rule matches, a handler
 * registered in the rule is called with the part of input matched by the rule.
 * A handler can be added to a rule by operator
 * threadscript::parser::rule_base::operator[]() with argument of type
 * threadscript::parser::handler.
 *
 * A rule can contain an error message reported in threadscript::parser::error
 * thrown if parsing fails. An error message can be set to a rule by operator
 * threadscript::parser::rule_base::operator[](std::string_view). A rule can
 * have a name used if rule tracing is enabled by setting a tracing function
 * into threadscript::parser::context::trace. A tracing name can be set to
 * a rule by operator threadscript::parser::rule_base::operator()().
 *
 * All rules are implemented by classes derived from
 * threadscript::parser::rule_base. There are some leaf rules, for example,
 * threadscript::parser::rules::any, threadscript::parser::rules::t,
 * threadscript::parser::rules::eof. Complex rules are created by combining
 * rule classes: threadscript::parser::rules::seq,
 * threadscript::parser::rules::alt, threadscript::parser::rules::repeat,
 * threadscript::parser::rules::cut, and threadscript::parser::rules::dyn.
 * Composite rules can be created by directly using these classes, but the
 * preferred way is to use combining operators
 * threadscript::parser::operator>>(), threadscript::parser::operator|(),
 * threadscript::parser::operator-(), threadscript::parser::operator*(),
 * threadscript::parser::operator+(), threadscript::parser::operator!(),
 * threadscript::parser::rules::dyn::operator>>=().
 *
 * In addition, there are some auxiliary declarations in namespace
 * threadscript::parser, e.g., threadscript::parser::rebind_handler (for
 * changing additional information passed to a handler),
 * threadscript::parser::script_iterator (an iterator with tracking the current
 * line and column in the input text, which can be easily created by helper
 * function threadscript::parser::make_script_iterator()), or
 * threadscript::parser::error (an exception type thrown if parsing fails).
 *
 * Specializations of templates from threadscript::parser and some common rules
 * useful for parsing textual data (in ASCII encoding) are in file
 * parser_ascii.hpp, namespace threadscript::parser_ascii. Exaples how to use
 * them are in the tests in test_parser_ascii.cpp.
 *
 * \subsection Architecture_Syntax_variants Syntax variants
 *
 * There can potentially be several different variants of syntax of
 * ThreadScript source code files. All of them produce the same parsed internal
 * representation in a threadscript::script object. Parses for syntax variants
 * are defined as classes in namespace threadscript::syntax. One of the syntax
 * variants is designated as the canonical reference syntax.
 *
 * \subsection Architecture_Canonical_syntax Canonical syntax
 *
 * The canonical syntax is defined in class threadscript::syntax::canon. The
 * canonical syntax is very simple. It is a textual representation of the tree
 * of threadscript::code_node objects. In a script source file, there is
 * a single root node that can contain descendant nodes. There are two kinds of
 * nodes.
 *
 * \arg A <em>value node</em> represents a single value, e.g., a number,
 * a string, or the special value \c null. It is written as a single literal of
 * the appropriate type. Value nodes are always leafs of the tree. \arg
 * A <em>function node</em> represents a function or a command to be applied to
 * its descendant nodes. It is written as the function name (an identifier)
 * followed by parenthesized, possibly empty, comma-separated, list of child
 * nodes. A function node can be a leaf (if having no children) or an internal
 * node (if it has at least one child).
 *
 * In addition, there are comments and whitespace, which can be freely added or
 * removed between any other syntax elements without changing the meaning of
 * the script.
 *
 * The formal grammar of the canonical syntax is defined in class
 * threadscript::syntax::canon::rules. See also \ref Canonical_syntax.
 *
 * \section Architecture_Execution Execution of a script
 *
 * See also \ref Script_execution in the language reference.
 *
 * Normally, a new threadscript::basic_value object must be dynamically
 * allocated for a result of any operation. Some operations provide an
 * optimization -- if the operation (e.g., threadscript::predef::f_bool) is
 * called with one additional argument (typically passed as the first one),
 * and the parameter is of the correct type, the result is stored into it and
 * this argument is returned, eliminating the allocation.
 */
