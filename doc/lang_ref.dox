/*! \page LangRef ThreadScript language reference
 *
 * \tableofcontents
 *
 * \section Canonical_syntax Canonical syntax
 *
 * The rules in the grammar are composed from leaf rules defined in class
 * threadscript::parser_ascii::rules::factory (abbreviated as \c rf), combined
 * by operators defined in namespace threadscript::parser and in classes
 * threadscript::parser::rules::dyn and threadscript::parser::rule_base:
 * \arg \link threadscript::parser::operator-() -R \endlink -- 0 to
 * 1 occurrence
 * \arg \link threadscript::parser::operator-() +R \endlink -- at least
 * 1 occurrence
 * \arg \link threadscript::parser::operator-() *R \endlink -- at least
 * 0 occurrences
 * \arg \link threadscript::parser::operator-() R1>>R2 \endlink --
 * concatenation
 * \arg \link threadscript::parser::operator-()  R1|R2 \endlink --
 * alternative
 * \arg \link threadscript::parser::operator-() !R \endlink -- disables
 * following alternatives
 * \arg \link threadscript::parser::rules::dyn::operator>>=() D>>=R \endlink
 * -- sets a child of a dynamic rule
 * \arg \link threadscript::parser::rule_base::operator[]() R[H] \endlink --
 * sets a handler for the rule (the parameter is a function)
 * \arg \link threadscript::parser::rule_base::operator[]() R["E"sv] \endlink --
 * sets an error message for the rule (the parameter is a std::string_view)
 * \arg \link threadscript::parser::rule_base::operator()() R("T"sv) \endlink --
 * sets a tracing name for the rule (the parameter is a std::string_view)
 *
 * Each rule is defined by a single occurrence of macro #RULE, which specifies
 * a rule name and definition (body). Definition os some rules, e.g., \c
 * node_fun and \c _params, is more complex in order to get better error
 * messages.
 *
 * The grammar, with \c script as the top-level rule:
 *
 * \snippet syntax_canon.cpp Grammar
 *
 * \section Script_values Values
 *
 * All values are accessed via \a references. A reference can point to a value
 * of any type, or contain a special value \c null (not pointing to any value).
 * Copying a reference, e.g., assigning to a variable or setting an element of
 * a \c vector or a \c hash does not copy the value. That is, the original and
 * the new reference point to the same value, which can be read or modified via
 * any of them.
 *
 * ThreadScript core languange provides the following scalar data types:
 * \arg \c bool -- It contains a Boolean value \c false or \c true. It is
 * represented by C++ type \c bool.
 * \arg \c int -- A signed integer of implementation-defined size, using two's
 * complement representation. Overflow in an arithmetic operation throws an
 * exception. It is represented by C++ type
 * threadscript::config::value_int_type.
 * \arg \c unsigned -- An unsigned integer of implementation-defined size. It
 * uses modulo arithmetic, therefore it never overflows. It is represented by
 * C++ type threadscript::config::value_unsigned_type.
 * \arg \c string -- A string of characters of C++ type \c char. It is
 * represented by C++ type std::string.
 *
 * ThreadScript core languange provides the following container data types:
 * \arg \c vector -- A vector of arbitrary variable size. Each element can
 * contain a value of any type, including \c null. It is represented by C++
 * type std::vector.
 * \arg \c hash -- An unordered has map of string keys to values of arbitrary
 * types, including \c null. It is represented by C++ type std::unordered_map.
 * 
 * Any modifiable value of a type from the core language is thread-local, that
 * is, it is owned by a single thread and cannot be accessed by other threads.
 * In order to make a value shareable among threads, it must be marked as
 * \a thread-safe (sometimes denoted as \a mt-safe), which also makes the value
 * read-only. This does not always apply to \link Native_classes
 * objects\endlink. The object implementation specifies if it is thread-safe
 * and if it is writable despite being thread-safe.
 *
 * Values use reference counting for memory management, without any automatic
 * breaking of reference cycles. Variable-size values (\c string, variable size
 * containers \c vector, \c hash, and some objects, e.g., \c shared_vector, \c
 * shared_hash) handle its storage for elements automatically, growing and
 * shrinking as necessary. Note that it is different from C++ std containers,
 * which grow automatically, but shrink only on request.
 *
 * \section Script_execution Script execution
 *
 * A script in the ThreadScript language is executed according to the internal
 * code representation obtained by parsing source code using a parser for
 * a selected syntax variant. The internal representation directly corresponds
 * to the structure of source in the canonical syntax. It is a tree of nodes,
 * with values in leaves and calls of named commands or functions in named
 * (internal) nodes. Child nodes of an internal node are interpreted as command
 * or function arguments. The script is executed by evaluating the root of the
 * tree, which yields a single value or terminates by an exception.
 *
 * We use words \e "command" and \e "function" almost interchangeably, because
 * they are both represented by named nodes in the code tree and implemented in
 * the same way. In the canonical syntax, commands and functions are
 * syntactically indistinguishable. Whether something behaves as a command or
 * a function depends on its internal implementation and is described in its
 * documentation. Generally, a \e function first evaluates all its parameters
 * and then computes a result. Imagine, e.g., a function computing a sum of its
 * numeric parameters. On the other hand, a \e command uses its own logic to
 * dynamically decide if and when each parameter is evaluated. An example is
 * a conditional (\c if) command. It first evaluates its first argument (the
 * condition). If it yields true, the second argument (the "then" branch) is
 * evaluated and the third argument (the "else" branch) is not evaluated. If
 * the condition yileds false, the second argument is skipped and the third
 * argument is evaluated.
 * 
 * \section Builtin_commands Built-in commands and functions
 *
 * Built-in commands and functions are implemented as classes in namespace
 * threadscript::predef. A name \c FUN used in ThreadScript source code
 * corresponds to a declaration \c f_FUN in the namespace. Detailed
 * documentation of each command or function is contained in the detailed
 * description of its implementation class (linked from the list of built-ins
 * below). Examples of using built-in commands and functions can be found in
 * test program test_predef.cpp.
 *
 * \subsection Builtin_Values Values, functions, and variables
 *
 * \arg \link threadscript::predef::f_bool bool\endlink -- Conversion to \c bool
 * \arg \link threadscript::predef::f_clone clone\endlink -- Copy a value
 * \arg \link threadscript::predef::f_fun fun\endlink -- Defines a function
 * \arg \link threadscript::predef::f_gvar gvar\endlink -- Setting thread-local
 * global variables
 * \arg \link threadscript::predef::f_hash hash\endlink -- Creates an empty hash
 * \arg \link threadscript::predef::f_int int\endlink -- Conversion to a signed
 * integer
 * \arg \link threadscript::predef::f_is_null is_null\endlink -- Check for
 * a null reference
 * \arg \link threadscript::predef::f_is_same is_same\endlink -- Check of
 * reference equality
 * \arg \link threadscript::predef::f_type type\endlink -- Gets value type
 * \arg \link threadscript::predef::f_unsigned unsigned\endlink -- Conversion
 * to an unsigned integer
 * \arg \link threadscript::predef::f_var var\endlink -- Creating, reading, and
 * writing variables
 * \arg \link threadscript::predef::f_vector vector\endlink -- Creates an empty
 * vector
 *
 * \subsection Builtin_Control_flow Control flow commands
 *
 * \arg \link threadscript::predef::f_if if\endlink -- Conditional command
 * \arg \link threadscript::predef::f_seq seq\endlink -- Sequence of commands
 * \arg \link threadscript::predef::f_throw throw\endlink -- Throwing exceptions
 * \arg \link threadscript::predef::f_try try\endlink -- Catching exceptions
 * \arg \link threadscript::predef::f_while while\endlink -- While-loop
 *
 * \subsection Builtin_Comparison_functions Comparison functions
 *
 * \arg \link threadscript::predef::f_eq eq\endlink -- Value equality
 * \arg \link threadscript::predef::f_ge ge\endlink -- Greater or equal
 * \arg \link threadscript::predef::f_gt gt\endlink -- Greater than
 * \arg \link threadscript::predef::f_le le\endlink -- Less or equal
 * \arg \link threadscript::predef::f_lt lt\endlink -- Less than
 * \arg \link threadscript::predef::f_ne ne\endlink -- Value inequality
 *
 * \subsection Builtin_Logical_functions Logical (Boolean) functions
 *
 * \arg \link threadscript::predef::f_and and\endlink -- Boolean AND
 * \arg \link threadscript::predef::f_and_r and_r\endlink -- Boolean AND
 * \arg \link threadscript::predef::f_not not\endlink -- Boolean NOT
 * \arg \link threadscript::predef::f_or or\endlink -- Boolean OR
 * \arg \link threadscript::predef::f_or_r or_r\endlink -- Boolean OR
 *
 * \subsection  Builtin_Arithmetic_functions Arithmetic functions
 *
 * \arg \link threadscript::predef::f_add add\endlink -- Addition
 * \arg \link threadscript::predef::f_div div\endlink -- Division
 * \arg \link threadscript::predef::f_mod mod\endlink -- Remainder
 * \arg \link threadscript::predef::f_mul mul\endlink -- Multiplication
 * \arg \link threadscript::predef::f_sub sub\endlink -- Subtraction
 *
 * \subsection  Builtin_string_functions String functions
 *
 * \arg \link threadscript::predef::f_size size\endlink -- Number of characters
 * \arg \link threadscript::predef::f_substr substr\endlink -- Substring
 *
 * \subsection  Builtin_vector_functions Vector functions
 *
 * \arg \link threadscript::predef::f_at at\endlink -- Indexing
 * \arg \link threadscript::predef::f_erase erase\endlink -- Shrinks a vector
 * \arg \link threadscript::predef::f_size size\endlink -- Number of elements
 * \arg \link threadscript::predef::f_vector vector\endlink -- Creates an empty
 * vector
 *
 * \subsection  Builtin_hash_functions Hash functions
 *
 * \arg \link threadscript::predef::f_at at\endlink -- Searching a value by
 * a key
 * \arg \link threadscript::predef::f_contains contains\endlink -- Key
 * membership test
 * \arg \link threadscript::predef::f_erase erase\endlink -- Erases elements
 * \arg \link threadscript::predef::f_hash hash\endlink -- Creates an empty hash
 * \arg \link threadscript::predef::f_keys keys\endlink -- Gets all keys of
 * a hash
 * \arg \link threadscript::predef::f_size size\endlink -- Number of elements
 *
 * \subsection Builtin_Multithreading Multithreading
 *
 * \arg \link threadscript::predef::f_is_mt_safe is_mt_safe\endlink -- Testing
 * of thread-safety of a value
 * \arg \link threadscript::predef::f_mt_safe mt_safe\endlink -- Makes a value
 * thread-safe
 *
 * \subsection Builtin_io Input/output functions
 *
 * \arg \link threadscript::predef::f_print print\endlink -- Output of values
 *
 * \section User_functions User-defined functions
 *
 * New functions can be defined in a script by command \c fun
 * (threadscript::predef::f_fun). When a user-defined function is called, its
 * arguments are available as local variable \c _args (the name defined by
 * threadscript::basic_value_function::symbol_params) of type \c vector. The
 * called function returns the value obtained by evaluation of its body.
 *
 * \section Integer_arithmetic Integer arithmetic
 *
 * Semantics of arithmetic operations with integers is based on rules of C++20.
 * Unsigned arithmetic (with arguments of type \c unsigned) is performed
 * <em>modulo 2<sup>N</sup></em>, where \e N is the number of bits in
 * threadscript::config::value_unsigned_type. Overflow of signed arithmetic
 * operations (with arguments of type \c int) throws exception
 * threadscript::exception::op_overflow.
 *
 * Due to different rules of signed and unsigned arithmentics, signed and
 * unsigned values may not be mixed in a single expression. Otherwise,
 * exception threadscript::exception::value_type is thrown.
 *
 * \section Native_classes Native classes and objects
 *
 * It is possible to define classes accessible from ThreadScript and
 * implemented as native C++ code. For each such ThreadScript class, the
 * corresponding C++ class is derived from threadscript::basic_value_object.
 *
 * For each class, a value representing its constructor function must be
 * created and registered in a symbol table by ThreadScript virtual machine
 * initialization C++ code. Each call of the constructor function from a script
 * creates a new object of the class. The instance is a normal ThreadScript
 * value that can be stored in a variable.
 *
 * Calling a method of an object is done by calling the object value as
 * a function and passing the method name as the first argument, which must
 * have type \c string.
 *
 * Examples of defining and using native classes can be found in test program
 * test_object.cpp.
 *
 * \subsection Builtin_classes Built-in native classes
 *
 * \arg \link threadscript::basic_channel channel\endlink -- A channel for
 * passing values among threads
 * \arg \link threadscript::basic_shared_hash shared_hash\endlink -- A hash
 * that can be modified by multiple threads
 * \arg \link threadscript::basic_shared_vector shared_vector\endlink --
 * A vector that can be modified by multiple threads
 */
