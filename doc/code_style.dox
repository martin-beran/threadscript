/*! \page Code_style Code style
 *
 * \section Cpp_general General C++ rules
 *
 * \arg C++20 is used.
 * \arg Unless specified otherwise here, rules from
 * <a href="https://en.cppreference.com/w/">cppreference.com</a> and
 * <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines">C++
 * Core Guidelines</a> appy.
 *
 * \section Source_code_formatting Source code formatting
 *
 * \arg Maximum line length is 80 characters, unless a longer line is
 * necessary.
 * \arg Indentation step is 4 spaces.
 *
 * \section Source_code_documentation Source code documentation
 *
 * \arg C++ source code is documented by Doxygen.
 * \arg Other code is documented by comments.
 * \arg Where applicable (see also \ref Thread_safety), thread safety of
 * declarations (e.g., classes) should be described by Doxygen custom command
 * <tt>\\threadsafe{safe,unsafe}</tt>. Each argument should be either
 * <tt>safe</tt> or <tt>unsafe</tt>, optionally followed by a more detailed
 * description of thread safety conditions. The first argument specifies thread
 * safety when modifying distinct objects from different threads. The second
 * argument specifies thread safety when modifying a single object from
 * different threads concurrently. It is always safe to perform non-modifying
 * operations on the same object from multiple threads.
 * \arg Pieces of code that should be visible to Doxygen, but not to the
 * compiler, can be wrapped in <tt>\#ifdef \ref DOXYGEN</tt>.
 *
 * \section File_names File names
 *
 * \arg Extension \c .hpp is used for header files
 * \arg Extension \c .cpp is used for implementation files
 * \arg Suffix \c _impl.hpp is used for implementations that cannot be directly
 * compiled to object code. Usually, such files contain definitions of template
 * (member) functions declared in the respective \c .hpp files.
 * \arg \c .hpp and \c _impl.hpp files are stored in directory
 * \link ../src/threadscript src/threadscript/\endlink.
 * \arg \c .cpp files are stored in directory \link ../src src/\endlink.
 * \arg Example: Declarations in \c src/threadscript/xyz.hpp would be
 * implemented in \c src/threadscript/xyz_impl.hpp and/or \c src/xyz.cpp.
 *
 * section Namespaces Namespaces
 *
 * \arg All ThreadScript source code is contained in the top-level namespace
 * \ref threadscript.
 * \arg Nested namespaces are defined for parts of code as needed.
 * \arg Internal implementation details related to contents of a namespace are
 * enclosed in its nested namespace \c impl. For example, there are namespaces
 * \ref threadscript and threadscript::impl.
 * \section Identifiers Identifiers
 *
 * \arg Names of macros are uppercase with words separated by underscores.
 * \arg Names of template parameters use camel-case (words not separated, the
 * first letter of each word capitalized).
 * \arg All other identifiers are lowercase with words separated by
 * underscores.
 *
 * \section Class_declarations Class declarations
 *
 * \arg Class access specifiers are used in the order \c public, \c protected,
 * \c private, unless other order is required by mutual dependencies of member
 * declarations.
 *
 * \arg Each sequence of member declarations belonging to the same access
 * specifier is organized in the order: types, const member variables,
 * constructors, destructor, copy and move assignment, other member functions,
 * non-const member variables, friends.
 *
 * \section Order_of_declarations Order of declarations
 *
 * \arg Declarations in header files are ordered in an order following from the
 * internal logic of the source code.
 *
 * \arg Definitions, except class members, in implementation files and inline
 * definitions of entities declared earlier in a header file use the same order
 * as their respective declarations.
 *
 * \arg Class members (member functions and static member variables) of each
 * class, which are defined outside of a class body, are defined together, with
 * variables defined first in the lexicographical order and member functions
 * following also in the lexicographical order.
 *
 * \section Functions
 *
 * \arg Every function parameter must be named (so that it can be documented)
 * in a function declaration. The related definition may omit names of unused
 * parameters.
 *
 * \section Control_structures Control structures
 *
 * \arg Each \c switch statement must have a \c default branch.
 * \arg Each \c switch statement with an enumeration must have a 
 * \c case for every enumerator.
 * \arg A fall-through in a switch branch must be marked by an explicit
 * <code>[[fallthrough]]</code> attribute.
 *
 * \section Thread_safety Thread safety
 *
 * By default, different objects may be accessed from different threads
 * simultanously. A single object may be read (reading data member and calling
 * const member functions) by multiple threads, but write operations
 * (modifying data members or calling non-const member functions) require
 * exclusive access to the object. Any other thread safety properties must be
 * documented (see also \ref Source_code_documentation).
 */
