/*! \page CppAPI C++ API
 *
 * \tableofcontents
 *
 * More information about the API can be found also in \ref Architecture.
 *
 * \section API_Headers Header files
 *
 * The main header file, which must be included by each program that uses
 * ThreadScript, is threadscript.hpp. This header does not include definitions
 * of some templates (e.g., definitions of many template classes). Instances of
 * such class templates with allocator_any used as an argument, are defined in
 * threadscript.cpp and are linked into the ThreadScript library.
 *
 * If other instances of class templates (indirectly) declared in
 * threadscript.hpp are needed with different template arguments than contained
 * in threadscript.cpp, then the appropriate <tt>*_impl.hpp</tt> file with
 * template definitions must be included in order to be able to instantiate the
 * required templates. An example is test program test_object.cpp, which
 * instantiates template threadscript::basic_value_object and therefore it
 * includes vm_data_impl.hpp.
 *
 * \section API_Examples Examples
 *
 * \subsection API_VM Virtual machine
 *
 * An example (from script_runner.hpp) of using the API for creating
 * a ThreadScript virtual machine, parsing and running a script:
 * \snippet script_runner.hpp parse_run
 *
 * A more complex example is in test_shared_vector.cpp (with function \c
 * make_sh_vars() defined in script_runner.hpp). It first runs a script
 * in a single thread in order to define global variables and functions. Then
 * it calls functions defined by the script in several parallel threads which
 * share data.
 * \snippet script_runner.hpp make_sh_vars
 * \snippet test_shared_vector.cpp run_threads
 *
 * \subsection API_Native Native objects
 *
 * A native class is derived from threadscript::basic_value_object. It is then
 * registered in a symbol table by calling
 * threadscript::basic_value_object::register_constructor().
 *
 * An example (from test_object.cpp) of a definition of a native class
 * implemented in C++:
 * \code
 * namespace ts = threadscript;
 * \endcode
 * \snippet test_object.cpp native_object
 *
 * An example (from test_object.cpp) of a registration of native classes:
 * \code
 * namespace ts = threadscript;
 * ts::allocator_any alloc;
 * ts::virtual_machine vm{alloc};
 * \endcode
 * \snippet test_object.cpp register_constructor
 *
 * \subsection API_Complete Complete script processing
 *
 * This is the implementation of function pg_ts::actions::script() in file
 * ts.cpp, which is the core functionality of program
 * \link Cmdline_ts ts\endlink.
 * \snippet ts.cpp script
 */
